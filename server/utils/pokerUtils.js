/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–∫–µ—Ä–Ω–æ–π –∏–≥—Ä—ã
 */

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
function createDeck() {
  const crypto = require('crypto');
  const suits = ['hearts', 'diamonds', 'clubs', 'spades'];
  const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
  
  const deck = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–π—Ç
  const timestamp = Date.now();
  const randomSeed = crypto.randomBytes(8).toString('hex');
  console.log(`[CARDS] üé≤ –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π: ${timestamp}, seed: ${randomSeed}`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∏–∑ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–∞—Å—Ç–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
  for (const suit of suits) {
    for (const value of values) {
      deck.push({ 
        suit, 
        value,
        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
        id: `${value}-${suit}-${timestamp}-${randomSeed}`
      });
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 52 –∫–∞—Ä—Ç—ã
  if (deck.length !== 52) {
    console.error(`[CARDS] ‚ùå –û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –∏–∑ ${deck.length} –∫–∞—Ä—Ç –≤–º–µ—Å—Ç–æ 52!`);
  } else {
    console.log(`[CARDS] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –∏–∑ ${deck.length} –∫–∞—Ä—Ç`);
  }
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
  let shuffled = shuffleDeck(deck);
  shuffled = shuffleDeck(shuffled);  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
  
  console.log(`[CARDS] üîÄ –ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞ –¥–≤–∞–∂–¥—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏`);
  
  return shuffled;
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞ —Å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º)
function shuffleDeck(deck) {
  const crypto = require('crypto');
  const shuffled = [...deck];
  
  for (let i = shuffled.length - 1; i > 0; i--) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    const randomBytes = crypto.randomBytes(4);
    const randomInt = randomBytes.readUInt32BE(0);
    const j = randomInt % (i + 1);
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  
  console.log(`[CARDS] ‚úÖ –ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º`);
  return shuffled;
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –∏–≥—Ä–µ
function validateGameCards(game) {
  const allCards = new Set();
  const duplicates = [];
  const cardsList = [];
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
  for (let i = 0; i < game.players.length; i++) {
    if (game.players[i].cards) {
      for (const card of game.players[i].cards) {
        if (card && card.value && card.suit) {
          const cardKey = `${card.value}-${card.suit}`;
          cardsList.push(`–ò–≥—Ä–æ–∫ ${i} (${game.players[i].username}): ${cardKey}`);
          
          if (allCards.has(cardKey)) {
            duplicates.push(`–ò–≥—Ä–æ–∫ ${i} (${game.players[i].username}): ${cardKey}`);
          } else {
            allCards.add(cardKey);
          }
        }
      }
    }
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã
  if (game.settings && game.settings.communityCards) {
    for (const card of game.settings.communityCards) {
      if (card && card.value && card.suit) {
        const cardKey = `${card.value}-${card.suit}`;
        cardsList.push(`–û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${cardKey}`);
        
        if (allCards.has(cardKey)) {
          duplicates.push(`–û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${cardKey}`);
        } else {
          allCards.add(cardKey);
        }
      }
    }
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`[CARDS] üìã –í—Å–µ –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ:`);
  cardsList.forEach(cardInfo => console.log(`[CARDS]   - ${cardInfo}`));
  
  if (duplicates.length > 0) {
    console.error(`[CARDS] ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –ö–ê–†–¢:`, duplicates);
    return {
      isValid: false,
      errors: duplicates,
      totalCards: allCards.size,
      duplicateCount: duplicates.length
    };
  }
  
  console.log(`[CARDS] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç –ø—Ä–æ–π–¥–µ–Ω–∞. –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: ${allCards.size}`);
  return {
    isValid: true,
    totalCards: allCards.size,
    duplicateCount: 0
  };
}

// –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
function dealCards(game) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  console.log(`[CARDS] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –¥–ª—è –∏–≥—Ä—ã`);
  game.deck = createDeck();
  console.log(`[CARDS] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∏–∑ ${game.deck.length} –∫–∞—Ä—Ç`);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const usedCards = new Set();
  
  // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
  for (let i = 0; i < game.players.length; i++) {
    const isBot = !!game.players[i].isBot;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫–æ–ª–æ–¥–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç
    if (game.deck.length < 2) {
      console.error(`[CARDS] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${i}!`);
      break;
    }
    
    const card1 = game.deck.pop();
    const card2 = game.deck.pop();
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const card1Key = `${card1.value}-${card1.suit}`;
    const card2Key = `${card2.value}-${card2.suit}`;
    
    if (usedCards.has(card1Key) || usedCards.has(card2Key) || card1Key === card2Key) {
      console.error(`[CARDS] ‚ùå –î–£–ë–õ–ò–ö–ê–¢ –ö–ê–†–¢ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${i}: ${card1Key}, ${card2Key}`);
      console.error(`[CARDS] –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:`, Array.from(usedCards));
      // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∑—è—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É
      continue;
    }
    
    usedCards.add(card1Key);
    usedCards.add(card2Key);
    
    console.log(`[CARDS] –ò–≥—Ä–æ–∫ ${i} (${game.players[i].username}): ${card1.value} ${card1.suit}, ${card2.value} ${card2.suit}`);
    
    // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç
    game.players[i].cards = [
      { 
        suit: card1.suit, 
        value: card1.value, 
        hidden: isBot // true –¥–ª—è –±–æ—Ç–æ–≤, false –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      },
      { 
        suit: card2.suit, 
        value: card2.value, 
        hidden: isBot // true –¥–ª—è –±–æ—Ç–æ–≤, false –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      }
    ];
  }
  
  console.log(`[CARDS] –†–æ–∑–¥–∞–Ω–æ ${game.players.length * 2} –∫–∞—Ä—Ç. –û—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ–ª–æ–¥–µ: ${game.deck.length}`);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–∞—Ä—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏
  const cardsValidation = validateGameCards(game);
  if (!cardsValidation.isValid) {
    console.error(`[CARDS] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç:`, cardsValidation.errors);
  } else {
    console.log(`[CARDS] ‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏. –í—Å–µ–≥–æ –∫–∞—Ä—Ç: ${cardsValidation.totalCards}`);
  }
  
  return game;
}

// –†–∞–∑–¥–∞—á–∞ –æ–±—â–∏—Ö –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª
function dealCommunityCards(deck, count, game) {
  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏–≥—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
  console.log(`[CARDS] üÉè –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–∞—á—É ${count} –æ–±—â–∏—Ö –∫–∞—Ä—Ç`);
  const cards = [];
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
  if (!deck || !Array.isArray(deck)) {
    console.error('[CARDS] ‚ùå –ö–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º!');
    return cards;
  }
  
  if (deck.length < count) {
    console.error(`[CARDS] ‚ùå –í –∫–æ–ª–æ–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç! –ù—É–∂–Ω–æ: ${count}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${deck.length}`);
    return cards;
  }
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ
  const allUsedCards = new Set();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
  if (game && game.players) {
    game.players.forEach((player, playerIndex) => {
      if (player.cards && Array.isArray(player.cards)) {
        player.cards.forEach(card => {
          if (card && card.suit && card.value) {
            const cardKey = `${card.value}-${card.suit}`;
            allUsedCards.add(cardKey);
            console.log(`[CARDS] ‚ô†Ô∏è –ò–≥—Ä–æ–∫ ${playerIndex} (${player.username}) –∏–º–µ–µ—Ç –∫–∞—Ä—Ç—É: ${cardKey}`);
          }
        });
      }
    });
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–∂–µ –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã
  if (game && game.settings && game.settings.communityCards) {
    game.settings.communityCards.forEach(card => {
      if (card && card.suit && card.value) {
        const cardKey = `${card.value}-${card.suit}`;
        allUsedCards.add(cardKey);
        console.log(`[CARDS] üé¥ –û–±—â–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ: ${cardKey}`);
      }
    });
  }
  
  console.log(`[CARDS] üìä –í—Å–µ–≥–æ —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –∏–≥—Ä–µ: ${allUsedCards.size}`);
  console.log(`[CARDS] üì¶ –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π: ${deck.length}`);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º –≤—ã–∑–æ–≤–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const thisCallCards = new Set();
  
  // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
  let attempts = 0;
  const maxAttempts = deck.length * 2; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  
  for (let i = 0; i < count && attempts < maxAttempts; attempts++) {
    if (deck.length === 0) {
      console.error('[CARDS] ‚ùå –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞! –ù–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã');
      break;
    }
    
    const card = deck.pop();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
    if (!card || !card.suit || !card.value) {
      console.error('[CARDS] ‚ùå –ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã!');
      continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–∞—Ä—Ç –≤–æ –í–°–ï–ô –∏–≥—Ä–µ
    const cardKey = `${card.value}-${card.suit}`;
    
    if (allUsedCards.has(cardKey)) {
      console.error(`[CARDS] ‚ùå –î–£–ë–õ–ò–ö–ê–¢ –ö–ê–†–¢–´ –û–ë–ù–ê–†–£–ñ–ï–ù –≤ –∏–≥—Ä–µ: ${cardKey}! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–æ–¥—ã...`);
      deck.unshift(card); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –≤ –Ω–∞—á–∞–ª–æ –∫–æ–ª–æ–¥—ã
      continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
    }
    
    if (thisCallCards.has(cardKey)) {
      console.error(`[CARDS] ‚ùå –î–£–ë–õ–ò–ö–ê–¢ –ö–ê–†–¢–´ –≤ —ç—Ç–æ–º –≤—ã–∑–æ–≤–µ: ${cardKey}! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–ª–æ–¥—ã...`);
      deck.unshift(card); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –≤ –Ω–∞—á–∞–ª–æ –∫–æ–ª–æ–¥—ã
      continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
    }
    
    // –ö–∞—Ä—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    allUsedCards.add(cardKey);
    thisCallCards.add(cardKey);
    
    console.log(`[CARDS] ‚úÖ –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É ${i + 1}/${count}: ${card.value} ${card.suit}`);
    
    cards.push({
      suit: card.suit,
      value: card.value,
      hidden: false // –û–±—â–∏–µ –∫–∞—Ä—Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã
    });
    
    i++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ –∫–∞—Ä—Ç—ã
  }
  
  if (attempts >= maxAttempts) {
    console.error(`[CARDS] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (${maxAttempts}) –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–∞—Ä—Ç!`);
  }
  
  console.log(`[CARDS] ‚úÖ –í—ã–¥–∞–Ω–æ ${cards.length}/${count} –æ–±—â–∏—Ö –∫–∞—Ä—Ç:`, cards.map(c => `${c.value} ${c.suit}`).join(', '));
  console.log(`[CARDS] üì¶ –û—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ–ª–æ–¥–µ: ${deck.length}`);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–µ –≤—ã–¥–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
  const cardKeys = cards.map(c => `${c.value}-${c.suit}`);
  const uniqueCards = new Set(cardKeys);
  if (cardKeys.length !== uniqueCards.size) {
    console.error(`[CARDS] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—ã–¥–∞–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –æ–¥–Ω–æ–º –≤—ã–∑–æ–≤–µ!`, cardKeys);
  }
  
  return cards;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
function shuffleArray(array) {
  const result = [...array];
  for (let i = result.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [result[i], result[j]] = [result[j], result[i]];
  }
  return result;
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
function nextRound(game) {
  console.log(`[ROUND] ====== –ü–ï–†–ï–•–û–î –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –†–ê–£–ù–î–£ ======`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º settings –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!game.settings) {
    game.settings = {};
  }
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  if (game.settings.roundTransition) {
    console.log(`[ROUND] üö´ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—É–Ω–¥—É —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤`);
    return game;
  }
  game.settings.roundTransition = true;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º communityCards –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!game.settings.communityCards) {
    game.settings.communityCards = [];
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤
  console.log(`[ROUND] üîÑ –°–ë–†–û–° hasActed –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞`);
  game.players.forEach((player, index) => {
    if (!player.folded) {
      player.hasActed = false;
      console.log(`[ROUND] –°–±—Ä–∞—Å—ã–≤–∞–µ–º hasActed –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${index}: ${player.username}`);
    }
  });
  
  const currentRound = game.settings.currentRound || 'preflop';
  console.log(`[ROUND] –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${currentRound}`);
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
  switch (currentRound) {
    case 'preflop':
      game.settings.currentRound = 'flop';
      // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–æ–ø –ù–ï –≤—ã–ª–æ–∂–µ–Ω
      if (!game.settings.communityCards || game.settings.communityCards.length === 0) {
        console.log(`[ROUND] ‚úÖ –í—ã–¥–∞–µ–º –§–õ–û–ü (3 –∫–∞—Ä—Ç—ã)`);
        const flopCards = dealCommunityCards(game.deck, 3, game);
        game.settings.communityCards = [...flopCards];
        console.log(`[ROUND] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–ª–æ–ø—É, –≤—ã–ª–æ–∂–µ–Ω–æ ${flopCards.length} –∫–∞—Ä—Ç:`, flopCards.map(c => `${c.value} ${c.suit}`).join(', '));
      } else {
        console.log(`[ROUND] ‚ùå –§–õ–û–ü –£–ñ–ï –í–´–õ–û–ñ–ï–ù (${game.settings.communityCards.length} –∫–∞—Ä—Ç), –ù–ï –≤—ã–¥–∞–µ–º –∫–∞—Ä—Ç—ã`);
      }
      break;
    case 'flop':
      game.settings.currentRound = 'turn';
      // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Ä–Ω –ù–ï –≤—ã–ª–æ–∂–µ–Ω
      if (game.settings.communityCards && game.settings.communityCards.length === 3) {
        console.log(`[ROUND] ‚úÖ –í—ã–¥–∞–µ–º –¢–ï–†–ù (1 –∫–∞—Ä—Ç–∞)`);
        const turnCards = dealCommunityCards(game.deck, 1, game);
        game.settings.communityCards.push(...turnCards);
        console.log(`[ROUND] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Ä–Ω—É, –≤—ã–ª–æ–∂–µ–Ω–∞ ${turnCards.length} –∫–∞—Ä—Ç–∞:`, turnCards.map(c => `${c.value} ${c.suit}`).join(', '));
      } else {
        console.log(`[ROUND] ‚ùå –¢–ï–†–ù –£–ñ–ï –í–´–õ–û–ñ–ï–ù (${game.settings.communityCards?.length || 0} –∫–∞—Ä—Ç), –ù–ï –≤—ã–¥–∞–µ–º –∫–∞—Ä—Ç—ã`);
      }
      break;
    case 'turn':
      game.settings.currentRound = 'river';
      // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∏–≤–µ—Ä –ù–ï –≤—ã–ª–æ–∂–µ–Ω
      if (game.settings.communityCards && game.settings.communityCards.length === 4) {
        console.log(`[ROUND] ‚úÖ –í—ã–¥–∞–µ–º –†–ò–í–ï–† (1 –∫–∞—Ä—Ç–∞)`);
        const riverCards = dealCommunityCards(game.deck, 1, game);
        game.settings.communityCards.push(...riverCards);
        console.log(`[ROUND] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∏–≤–µ—Ä—É, –≤—ã–ª–æ–∂–µ–Ω–∞ ${riverCards.length} –∫–∞—Ä—Ç–∞:`, riverCards.map(c => `${c.value} ${c.suit}`).join(', '));
      } else {
        console.log(`[ROUND] ‚ùå –†–ò–í–ï–† –£–ñ–ï –í–´–õ–û–ñ–ï–ù (${game.settings.communityCards?.length || 0} –∫–∞—Ä—Ç), –ù–ï –≤—ã–¥–∞–µ–º –∫–∞—Ä—Ç—ã`);
      }
      break;
    case 'river':
      game.settings.currentRound = 'showdown';
      console.log(`[ROUND] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–æ—É–¥–∞—É–Ω—É`);
      // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ showdown
      game.settings.roundTransition = false;
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      return determineWinner(game);
    default:
      // –£–∂–µ –Ω–∞ showdown, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
      game.status = 'finished';
      game.settings.roundTransition = false;
  }

  // –ù–∞ –Ω–æ–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –ø–æ—Å–ª–µ –¥–∏–ª–µ—Ä–∞
  const dealerIndex = game.players.findIndex(p => p.isDealer);
  const playersCount = game.players.length;
  
  let nextPlayerIndex = (dealerIndex + 1) % playersCount;
  
  // –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –¥–∏–ª–µ—Ä–∞
  for (let i = 0; i < playersCount; i++) {
    if (!game.players[nextPlayerIndex]?.folded) {
      break;
    }
    nextPlayerIndex = (nextPlayerIndex + 1) % playersCount;
  }
  
  console.log(`[ROUND] –ü–æ–∑–∏—Ü–∏—è –¥–∏–ª–µ—Ä–∞: ${dealerIndex}`);
  console.log(`[ROUND] –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ ${game.settings.currentRound}, —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ ${nextPlayerIndex} (${game.players[nextPlayerIndex]?.username})`);
  
  game.settings.currentTurn = nextPlayerIndex;
  
  // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ä–∞—É–Ω–¥–∞
  game.settings.roundTransition = false;
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –∏–≥—Ä–µ –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞
  const gameValidation = validateGameCards(game);
  if (!gameValidation.isValid) {
    console.error(`[ROUND] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–∞—É–Ω–¥—É ${game.settings.currentRound}:`, gameValidation.errors);
  } else {
    console.log(`[ROUND] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞ ${game.settings.currentRound} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ`);
  }
  
  return game;
}

// –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
function nextTurn(game) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º settings –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!game.settings) {
    game.settings = {};
  }
  
  const currentTurn = game.settings.currentTurn || 0;
  const playersCount = game.players.length;
  let nextPlayerIndex = (currentTurn + 1) % playersCount;
  
  // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
  let allPlayersActed = true;
  let activePlayers = 0;
  
  for (let i = 0; i < playersCount; i++) {
    if (!game.players[i].folded) {
      activePlayers++;
      
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
      const maxBet = Math.max(...game.players.map(p => p.currentBet || 0));
      
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É, —Ä–∞–≤–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π, –∏ –Ω–µ –≤—ã–±—ã–ª, –∑–Ω–∞—á–∏—Ç, –Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥
      if (!game.players[i].hasActed || game.players[i].currentBet < maxBet) {
        allPlayersActed = false;
      }
    }
  }
  
  // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
  if (activePlayers <= 1) {
    return determineWinner(game);
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
  if (allPlayersActed) {
    return nextRound(game);
  }
  
  // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  for (let i = 0; i < playersCount; i++) {
    if (!game.players[nextPlayerIndex].folded) {
      break;
    }
    nextPlayerIndex = (nextPlayerIndex + 1) % playersCount;
  }
  
  game.settings.currentTurn = nextPlayerIndex;
  return game;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ä—Ç –∏ –µ—ë —Å–∏–ª—ã
function evaluateHand(cards) {
  // –ü—Ä–∏–≤–æ–¥–∏–º –∫–∞—Ä—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const formattedCards = cards.map(card => {
    let value = card.value;
    // –ü—Ä–∏–≤–æ–¥–∏–º –±—É–∫–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —á–∏—Å–ª–æ–≤—ã–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if (value === 'J') value = '11';
    if (value === 'Q') value = '12';
    if (value === 'K') value = '13';
    if (value === 'A') value = '14'; // –¢—É–∑ - —Å–∞–º–∞—è —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞
    
    return {
      suit: card.suit,
      value: parseInt(value, 10),
      original: card.value
    };
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
  formattedCards.sort((a, b) => b.value - a.value);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –æ—Ç —Å–∞–º–æ–π —Å–∏–ª—å–Ω–æ–π –∫ —Å–∞–º–æ–π —Å–ª–∞–±–æ–π
  
  // 1. –†–æ—è–ª-—Ñ–ª–µ—à (Royal Flush)
  const royalFlush = isRoyalFlush(formattedCards);
  if (royalFlush.found) {
    return { rank: 10, name: '–†–æ—è–ª-—Ñ–ª–µ—à', cards: royalFlush.cards };
  }
  
  // 2. –°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à (Straight Flush)
  const straightFlush = isStraightFlush(formattedCards);
  if (straightFlush.found) {
    return { rank: 9, name: '–°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à', cards: straightFlush.cards };
  }
  
  // 3. –ö–∞—Ä–µ (Four of a Kind)
  const fourOfAKind = isFourOfAKind(formattedCards);
  if (fourOfAKind.found) {
    return { rank: 8, name: '–ö–∞—Ä–µ', cards: fourOfAKind.cards };
  }
  
  // 4. –§—É–ª–ª-—Ö–∞—É—Å (Full House)
  const fullHouse = isFullHouse(formattedCards);
  if (fullHouse.found) {
    return { rank: 7, name: '–§—É–ª–ª-—Ö–∞—É—Å', cards: fullHouse.cards };
  }
  
  // 5. –§–ª–µ—à (Flush)
  const flush = isFlush(formattedCards);
  if (flush.found) {
    return { rank: 6, name: '–§–ª–µ—à', cards: flush.cards };
  }
  
  // 6. –°—Ç—Ä–∏—Ç (Straight)
  const straight = isStraight(formattedCards);
  if (straight.found) {
    return { rank: 5, name: '–°—Ç—Ä–∏—Ç', cards: straight.cards };
  }
  
  // 7. –¢—Ä–æ–π–∫–∞ (Three of a Kind)
  const threeOfAKind = isThreeOfAKind(formattedCards);
  if (threeOfAKind.found) {
    return { rank: 4, name: '–¢—Ä–æ–π–∫–∞', cards: threeOfAKind.cards };
  }
  
  // 8. –î–≤–µ –ø–∞—Ä—ã (Two Pairs)
  const twoPairs = isTwoPairs(formattedCards);
  if (twoPairs.found) {
    return { rank: 3, name: '–î–≤–µ –ø–∞—Ä—ã', cards: twoPairs.cards };
  }
  
  // 9. –ü–∞—Ä–∞ (One Pair)
  const onePair = isOnePair(formattedCards);
  if (onePair.found) {
    return { rank: 2, name: '–ü–∞—Ä–∞', cards: onePair.cards };
  }
  
  // 10. –°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ (High Card)
  return { rank: 1, name: '–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞', cards: [formattedCards[0]] };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function determineWinner(game) {
  console.log(`[SHOWDOWN] üèÅ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è`);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –∏–≥—Ä–µ –ø–µ—Ä–µ–¥ —à–æ—É–¥–∞—É–Ω–æ–º
  const gameValidation = validateGameCards(game);
  if (!gameValidation.isValid) {
    console.error(`[SHOWDOWN] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–µ—Ä–µ–¥ —à–æ—É–¥–∞—É–Ω–æ–º:`, gameValidation.errors);
  } else {
    console.log(`[SHOWDOWN] ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç –ø–µ—Ä–µ–¥ —à–æ—É–¥–∞—É–Ω–æ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ`);
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ —Å–±—Ä–æ—Å–∏–≤—à–∏—Ö –∫–∞—Ä—Ç—ã)
  const activePlayers = game.players.filter(p => !p.folded);
  
  // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫, –æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç
  if (activePlayers.length === 1) {
    const winner = activePlayers[0];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫ –∫ —Ñ–∏—à–∫–∞–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winnerIndex = game.players.findIndex(p => p === winner);
    game.players[winnerIndex].chips += game.pot;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    game.pot = 0;
    game.status = 'finished';
    game.winner = winner.username || '–ò–≥—Ä–æ–∫ ' + winnerIndex;
    game.winningHand = '–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–±—Ä–æ—Å–∏–ª–∏ –∫–∞—Ä—Ç—ã';
    
    return game;
  }
  
  // –ï—Å–ª–∏ –∏–≥—Ä–∞ –¥–æ—à–ª–∞ –¥–æ –≤—Å–∫—Ä—ã—Ç–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω–µ–π—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
  const playersWithHandRanks = activePlayers.map(player => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º settings –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!game.settings) {
      game.settings = {};
    }
    if (!game.settings.communityCards) {
      game.settings.communityCards = [];
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ —Å –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
    const hand = [...player.cards, ...game.settings.communityCards];
    
    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    const { rank, name, cards } = evaluateHand(hand);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    return {
      player,
      playerIndex: game.players.findIndex(p => p === player),
      handRank: rank,
      handName: name,
      bestCards: cards
    };
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–Ω–≥—É –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É)
  playersWithHandRanks.sort((a, b) => b.handRank - a.handRank);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è(–µ–π) - –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –≤—ã—Å—à–∏–º —Ä–∞–Ω–≥–æ–º
  const winners = [playersWithHandRanks[0]];
  for (let i = 1; i < playersWithHandRanks.length; i++) {
    if (playersWithHandRanks[i].handRank === winners[0].handRank) {
      // –ï—Å–ª–∏ —Ä–∞–≤–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–µ
      if (winners[0].bestCards[0].value === playersWithHandRanks[i].bestCards[0].value) {
        winners.push(playersWithHandRanks[i]);
      }
    } else {
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –∏–º–µ—é—Ç –±–æ–ª–µ–µ —Å–ª–∞–±—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      break;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –¥–µ–ª–∏–º –±–∞–Ω–∫ –ø–æ—Ä–æ–≤–Ω—É
  const winnerShare = Math.floor(game.pot / winners.length);
  
  winners.forEach(winner => {
    game.players[winner.playerIndex].chips += winnerShare;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
  playersWithHandRanks.forEach(playerData => {
    const playerIndex = playerData.playerIndex;
    game.players[playerIndex].winningCards = playerData.bestCards;
    game.players[playerIndex].handRank = playerData.handRank;
    game.players[playerIndex].handName = playerData.handName;
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
  game.pot = 0;
  game.status = 'finished';
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º showdown –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –¥–æ—à–ª–∞ –¥–æ –≤—Å–∫—Ä—ã—Ç–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
  game.showdown = activePlayers.length > 1;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  game.winner = winners.map(w => w.player.username || '–ò–≥—Ä–æ–∫ ' + w.playerIndex).join(', ');
  game.winningHand = winners[0].handName;
  game.winningCombination = getCardDescriptions(winners[0].bestCards);
  
  console.log(`[ROUND] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —à–æ—É–¥–∞—É–Ω–∞: ${game.winner} —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π ${game.winningHand}`);
  
  return game;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π

// –†–æ—è–ª-—Ñ–ª–µ—à (10, J, Q, K, A –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏)
function isRoyalFlush(cards) {
  const flush = isFlush(cards);
  if (!flush.found) return { found: false };
  
  const straightFlush = isStraightFlush(cards);
  if (!straightFlush.found) return { found: false };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ - —Ç—É–∑
  if (straightFlush.cards[0].value === 14) {
    return { found: true, cards: straightFlush.cards };
  }
  
  return { found: false };
}

// –°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à (5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏)
function isStraightFlush(cards) {
  const flush = isFlush(cards);
  if (!flush.found) return { found: false };
  
  const flushCards = flush.cards;
  const straight = isStraight(flushCards);
  
  if (straight.found) {
    return { found: true, cards: straight.cards };
  }
  
  return { found: false };
}

// –ö–∞—Ä–µ (4 –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞)
function isFourOfAKind(cards) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const groups = {};
  cards.forEach(card => {
    if (!groups[card.value]) groups[card.value] = [];
    groups[card.value].push(card);
  });
  
  // –ò—â–µ–º –≥—Ä—É–ø–ø—É –∏–∑ 4 –∫–∞—Ä—Ç
  for (const value in groups) {
    if (groups[value].length === 4) {
      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –ø—è—Ç—É—é –∫–∞—Ä—Ç—É (–∫–∏–∫–µ—Ä)
      const kickers = cards.filter(card => card.value != value);
      return { found: true, cards: [...groups[value], kickers[0]] };
    }
  }
  
  return { found: false };
}

// –§—É–ª–ª-—Ö–∞—É—Å (3 –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ + 2 –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞)
function isFullHouse(cards) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const groups = {};
  cards.forEach(card => {
    if (!groups[card.value]) groups[card.value] = [];
    groups[card.value].push(card);
  });
  
  let threeOfAKind = null;
  let pair = null;
  
  // –ò—â–µ–º —Ç—Ä–æ–π–∫—É –∏ –ø–∞—Ä—É
  for (const value in groups) {
    if (groups[value].length >= 3 && !threeOfAKind) {
      threeOfAKind = groups[value].slice(0, 3);
    } else if (groups[value].length >= 2 && !pair) {
      pair = groups[value].slice(0, 2);
    }
  }
  
  if (threeOfAKind && pair) {
    return { found: true, cards: [...threeOfAKind, ...pair] };
  }
  
  return { found: false };
}

// –§–ª–µ—à (5 –∫–∞—Ä—Ç –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏)
function isFlush(cards) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –º–∞—Å—Ç–∏
  const suits = {};
  cards.forEach(card => {
    if (!suits[card.suit]) suits[card.suit] = [];
    suits[card.suit].push(card);
  });
  
  // –ò—â–µ–º –≥—Ä—É–ø–ø—É –∏–∑ 5+ –∫–∞—Ä—Ç –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏
  for (const suit in suits) {
    if (suits[suit].length >= 5) {
      return { found: true, cards: suits[suit].slice(0, 5) };
    }
  }
  
  return { found: false };
}

// –°—Ç—Ä–∏—Ç (5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç)
function isStraight(cards) {
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const uniqueValues = [];
  const seen = {};
  
  cards.forEach(card => {
    if (!seen[card.value]) {
      seen[card.value] = true;
      uniqueValues.push(card);
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  uniqueValues.sort((a, b) => b.value - a.value);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≤–æ–∑–º–æ–∂–Ω—É—é –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å—Ç—Ä–∏—Ç–∞
  for (let i = 0; i < uniqueValues.length - 4; i++) {
    if (uniqueValues[i].value - uniqueValues[i + 4].value === 4) {
      return { found: true, cards: uniqueValues.slice(i, i + 5) };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∏—Ç –æ—Ç 5 –¥–æ —Ç—É–∑–∞ (A-5-4-3-2)
  if (
    uniqueValues.some(card => card.value === 14) && // –ï—Å—Ç—å —Ç—É–∑
    uniqueValues.some(card => card.value === 2) && 
    uniqueValues.some(card => card.value === 3) && 
    uniqueValues.some(card => card.value === 4) && 
    uniqueValues.some(card => card.value === 5)
  ) {
    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è A-5-4-3-2
    const aceToFive = [
      uniqueValues.find(card => card.value === 14),
      uniqueValues.find(card => card.value === 5),
      uniqueValues.find(card => card.value === 4),
      uniqueValues.find(card => card.value === 3),
      uniqueValues.find(card => card.value === 2)
    ];
    
    return { found: true, cards: aceToFive };
  }
  
  return { found: false };
}

// –¢—Ä–æ–π–∫–∞ (3 –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞)
function isThreeOfAKind(cards) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const groups = {};
  cards.forEach(card => {
    if (!groups[card.value]) groups[card.value] = [];
    groups[card.value].push(card);
  });
  
  // –ò—â–µ–º –≥—Ä—É–ø–ø—É –∏–∑ 3 –∫–∞—Ä—Ç
  for (const value in groups) {
    if (groups[value].length === 3) {
      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –¥–≤–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã (–∫–∏–∫–µ—Ä—ã)
      const kickers = cards
        .filter(card => card.value != value)
        .slice(0, 2);
      
      return { found: true, cards: [...groups[value], ...kickers] };
    }
  }
  
  return { found: false };
}

// –î–≤–µ –ø–∞—Ä—ã
function isTwoPairs(cards) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const groups = {};
  cards.forEach(card => {
    if (!groups[card.value]) groups[card.value] = [];
    groups[card.value].push(card);
  });
  
  const pairs = [];
  
  // –ò—â–µ–º –ø–∞—Ä—ã
  for (const value in groups) {
    if (groups[value].length >= 2) {
      pairs.push(groups[value].slice(0, 2));
    }
  }
  
  if (pairs.length >= 2) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –æ—Ç —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –∫ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π
    pairs.sort((a, b) => b[0].value - a[0].value);
    
    // –í—ã–±–∏—Ä–∞–µ–º –¥–≤–µ —Å—Ç–∞—Ä—à–∏–µ –ø–∞—Ä—ã
    const topPairs = [].concat(pairs[0], pairs[1]);
    
    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –ø—è—Ç—É—é –∫–∞—Ä—Ç—É (–∫–∏–∫–µ—Ä)
    const usedValues = [pairs[0][0].value, pairs[1][0].value];
    const kicker = cards.find(card => !usedValues.includes(card.value));
    
    return { found: true, cards: [...topPairs, kicker] };
  }
  
  return { found: false };
}

// –û–¥–Ω–∞ –ø–∞—Ä–∞
function isOnePair(cards) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  const groups = {};
  cards.forEach(card => {
    if (!groups[card.value]) groups[card.value] = [];
    groups[card.value].push(card);
  });
  
  // –ò—â–µ–º –ø–∞—Ä—É
  for (const value in groups) {
    if (groups[value].length === 2) {
      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ç—Ä–∏ –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã (–∫–∏–∫–µ—Ä—ã)
      const kickers = cards
        .filter(card => card.value != value)
        .slice(0, 3);
      
      return { found: true, cards: [...groups[value], ...kickers] };
    }
  }
  
  return { found: false };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç
function getCardDescriptions(cards) {
  const valueMap = {
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    '8': '8',
    '9': '9',
    '10': '10',
    '11': '–í–∞–ª–µ—Ç',
    '12': '–î–∞–º–∞',
    '13': '–ö–æ—Ä–æ–ª—å',
    '14': '–¢—É–∑'
  };
  
  const suitMap = {
    'hearts': '‚ô•',
    'diamonds': '‚ô¶',
    'clubs': '‚ô£',
    'spades': '‚ô†'
  };
  
  return cards.map(card => {
    const valueName = card.original ? card.original : valueMap[card.value.toString()];
    const suitSymbol = suitMap[card.suit];
    return `${valueName}${suitSymbol}`;
  }).join(', ');
}

module.exports = {
  createDeck,
  shuffleDeck,
  dealCards,
  dealCommunityCards,
  nextRound,
  nextTurn,
  evaluateHand,
  determineWinner,
  validateGameCards
}; 